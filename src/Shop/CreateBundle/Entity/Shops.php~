<?php

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Shop\CreateBundle\Entity;

use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\Validator\Constraints as Assert;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass="Shop\CreateBundle\Repository\ShopsRepository")
 * @ORM\Table(name="shops")
 */

Class Shops
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\ManyToOne(targetEntity="User\RegistrationBundle\Entity\Users", inversedBy="shopManager")
     * @ORM\JoinColumn(name="manager_id", referencedColumnName="id")
     * )
     */
    protected $manager;
    
    /**
     * @ORM\ManyToOne(targetEntity="User\RegistrationBundle\Entity\City")
     * @ORM\JoinColumn(name="city_id", referencedColumnName="id")
     */
    protected $city;
    
    /**
     * @ORM\Column(type="string", length=45)
     */
    protected $shopname;
    
    /**
     * @ORM\Column(type="string", length=45, unique=true)
     */
    protected $unique_name;
    
    /**
     * @ORM\Column(type="integer")
     */
    protected $rating;

    /**
     * @ORM\Column(type="text")
     */
    protected $description;
    
    /**
     * @ORM\Column(type="datetime", name="created_at")
     *
     * @var \DateTime $createdAt
     */
    protected $createdAt;
    
    /**
     * @ORM\Column(type="string", length=255, nullable=true)
     */
    protected $email;
    
    /**
     * @ORM\Column(type="bigint", nullable=true)
     */
    protected $phone;
    
    /**
     * @Assert\Image(
     *     maxSize = "1M",
     *     mimeTypes = {"image/jpeg", "image/gif", "image/png"},
     *     maxSizeMessage = "Максимальный вес картинки 1MB.",
     *     mimeTypesMessage = "Только таких типов ихображений можно загрузитью"
     * )
     *
     * @var UploadedFile
     */
    protected $file;
    
    /**
     * @ORM\Column(name="logo", type="string", length=255, nullable=true)
     */
    protected $path;
    
    /**
     * @ORM\ManyToMany(targetEntity="User\RegistrationBundle\Entity\Users", inversedBy="shop")
     * @ORM\JoinTable(name="shops_like")
     */
    protected $like_shop;

    /**
     * @ORM\ManyToMany(targetEntity="Shop\CreateBundle\Entity\Keywords", inversedBy="shop")
     * @ORM\JoinTable(name="keywords_shop")
     */
    protected $keywords;
    
    /**
     * @ORM\ManyToMany(targetEntity="User\RegistrationBundle\Entity\Users", inversedBy="shopUsers")
     * @ORM\JoinTable(name="users_shops")
     */
    protected $users;
    
    /**
     * @ORM\OneToMany(targetEntity="Manager\PartnersBundle\Entity\Partners", mappedBy="shops")
     */
    protected $partners;
    
    /**
     * @ORM\OneToMany(targetEntity="Shop\CreateBundle\Entity\ShopsDelivery", mappedBy="shops")
     */
    protected $shops_delivery;

    /**
     * @ORM\OneToMany(targetEntity="Manager\AdvertisingBundle\Entity\AdvertisingShop", mappedBy="shops")
     */
    protected $advertising_shop;

    /**
     * Construct for class Shops
     */
    public function __construct() {
        $this->rating = 0;

        $this->manager = new ArrayCollection();
        $this->users = new ArrayCollection();
        $this->partners = new ArrayCollection();
        $this->shops_delivery = new ArrayCollection();
        $this->advertising_shop = new ArrayCollection();

        $this->createdAt = new \DateTime();
    }
    
    /**
     * toString for class Country
     */
    public function __toString() {
        return $this->shopname;
    }
    
    /**
     * Sets file.
     *
     * @param UploadedFile $file
     */
    public function setFile(UploadedFile $file = null)
    {
        $this->file = $file;
    }

    /**
     * Get file.
     *
     * @return UploadedFile
     */
    public function getFile()
    {
        return $this->file;
    }
    
    public function getAbsolutePath()
    {
        return null === $this->path
            ? null
            : $this->getUploadRootDir().'/'.$this->path;
    }

    public function getWebPath()
    {
        return null === $this->path
            ? null
            : $this->getUploadDir().'/'.$this->path;
    }

    protected function getUploadRootDir()
    {
        $dir = __DIR__.'/../../../../web/'.$this->getUploadDir();
        if (!file_exists($dir)) {
            mkdir($dir, 0775);
        }

        return $dir;
    }

    protected function getUploadDir()
    {
        return 'public/images/logo';
    }
    
    public function preUpload()
    {   
        if (null !== $this->file) {
            $filename = sha1(uniqid(mt_rand(), true));
            $this->path = $filename.'.'.$this->file->guessExtension();

            return $this->getUploadDir().'/'.$this->path;
        }
    }
    
    public function upload()
    {
        if (null === $this->file) return;

        $this->getFile()->move(
            $this->getUploadRootDir(),
            $this->path
        );

        $this->path = $this->getUploadDir()."/".$this->path;
        $this->file = null;
    }
    
    public function removeUpload()
    {
        $file = $this->getAbsolutePath();

        if ($file) unlink($file);
    }
}
